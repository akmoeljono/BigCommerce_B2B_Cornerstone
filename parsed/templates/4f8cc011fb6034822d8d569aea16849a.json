{"layout/empty":"<!DOCTYPE html>\n<html lang=\"{{ locale_name }}\">\n<head>\n    <title>{{ head.title }}</title>\n    {{{ head.meta_tags }}}\n    {{{ head.config }}}\n\n    <link href=\"{{ head.favicon }}\" rel=\"shortcut icon\">\n    {{#block \"head\"}}{{/block}}\n</head>\n<body>\n    {{#block \"page\"}}{{/block}}\n</body>\n</html>\n","pages/checkout":"{{#partial \"head\"}}\n\n{{{ checkout.checkout_head }}}\n{{{ stylesheet '/assets/css/optimized-checkout.css' }}}\n{{ getFontsCollection }}\n\n<script type=\"text/javascript\">\n    window.language = {{{langJson 'optimized_checkout'}}};\n</script>\n\n{{{head.scripts}}}\n\n{{/partial}}\n\n{{#partial \"page\"}}\n<header class=\"checkoutHeader optimizedCheckout-header\">\n    <div class=\"checkoutHeader-content\">\n        <h1 class=\"is-srOnly\">{{lang 'checkout.title'}}</h1>\n        <h2 class=\"checkoutHeader-heading\">\n            <a class=\"checkoutHeader-link\" href=\"{{urls.home}}\">\n                {{#if checkout.header_image}}\n                    <img alt=\"{{settings.store_logo.title}}\" class=\"checkoutHeader-logo\" id=\"logoImage\" src=\"{{ checkout.header_image }}\"/>\n                {{ else }}\n                    <span class=\"header-logo-text\">{{settings.store_logo.title}}</span>\n                {{/if}}\n            </a>\n        </h2>\n    </div>\n</header>\n\n{{{ checkout.checkout_content }}}\n\n{{{ footer.scripts }}}\n\n{{/partial}}\n\n{{> layout/empty}}\n\n<script>\n    let listeners = [], \n    doc = window.document, \n    MutationObserver = window.MutationObserver || window.WebKitMutationObserver,\n    observer;\n    \n    function ready(selector, fn) {\n        // Store the selector and callback to be monitored\n        listeners.push({\n            selector: selector,\n            fn: fn\n        });\n        if (!observer) {\n            // Watch for changes in the document\n            observer = new MutationObserver(check);\n            observer.observe(doc.documentElement, {\n                childList: true,\n                subtree: true\n            });\n        }\n        // Check if the element is currently in the DOM\n        check();\n    }\n        \n    function check() {\n        // Check the DOM for elements matching a stored selector\n        for (let i = 0, len = listeners.length, listener, elements; i < len; i++) {\n            listener = listeners[i];\n            // Query for elements matching the specified selector\n            elements = doc.querySelectorAll(listener.selector);\n            for (let j = 0, jLen = elements.length, element; j < jLen; j++) {\n                element = elements[j];\n                // Make sure the callback isn't invoked with the \n                // same element more than once\n                if (!element.ready) {\n                    element.ready = true;\n                    // Invoke the callback with the element\n                    listener.fn.call(element, element);\n                }\n            }\n        }\n    }\n\n    ready('#checkout-shipping-options', function(element) {\n        const optionNames = document.querySelectorAll('#checkout-shipping-options > .form-body .form-checklist-item .shippingOption-desc');\n        optionNames.forEach(optionName => {\n            if (optionName.innerHTML === 'Free Shipping') {\n                optionName.innerHTML = 'Shipping cost will be calculated separately. Customer service will contact you if there is an additional charge.';\n                optionName.nextElementSibling.style.display = 'none';\n            }\n        })\n    });\n\n    ready('#checkout-shipping-options > .form-body .form-checklist-item .shippingOption .shippingOption-desc', function(element) {\n        const optionNames = document.querySelectorAll('#checkout-shipping-options > .form-body .form-checklist-item .shippingOption-desc');\n        optionNames.forEach(optionName => {\n            if (optionName.innerHTML === 'Free Shipping') {\n                optionName.innerHTML = 'Shipping cost will be calculated separately. Customer service will contact you if there is an additional charge.';\n                optionName.nextElementSibling.style.display = 'none';\n            }\n        })\n    });\n\n    ready('.checkout-step--shipping .checkout-view-content .dropdown--select .dropdownMenu', function(element) {\n        if (document.querySelector('.dropdown--select .dropdownMenu')) {\n            const dropdowmItems = document.querySelectorAll('.dropdown--select .dropdown-menu-item');\n            if (dropdowmItems) {\n                dropdowmItems.forEach(item => {\n                    if (item.innerText === 'Enter a new address') {\n                        item.style.display = 'none';\n                    }\n                });\n            };\n        };\n    });\n\n    ready('.modal', () => {\n        if (document.querySelector('.button.cart-modal-continue')) {\n            document.querySelector('.button.cart-modal-continue').innerText = 'Return to Checkout';\n        }\n    })\n\n    ready('.checkout-step--payment', function(element) {\n\n        if (element.querySelector('.checkout-view-content') === null) {\n            element.style.display = 'none';\n        } else {\n            element.style.display = 'list-item';\n        }\n        \n        // Another observer to check every change on payment\n        const targetNode = document.querySelector('.checkout-step--payment');\n        const config = { attributes: true, childList: true };\n\n        // Callback function to execute when mutations are observed\n        const callback = (mutationList, observer) => {\n            for (const mutation of mutationList) {\n                if (targetNode.querySelector('.checkout-view-content') === null) {\n                    targetNode.style.display = 'none';\n                } else {\n                    targetNode.style.display = 'list-item';\n                }\n            }\n        };\n\n        const observer2 = new MutationObserver(callback);\n        observer2.observe(targetNode, config);\n    })\n</script>"}
